1)find the nth term of fibonacci series

class Fibonacci {
static int fib(int n)
{
if (n==0||n==1)
return 0;
else if(n==2)
return 1;
return fib(n - 1) + fib(n - 2);
}
public static void main(String args[])
{
int n = 9;
System.out.println(fib(n));
}
}

OUTPUT:
21


2) Find Sum of Nth term

program:

import java.io.*;
  
class Series {
      
    static int term(int n){
        return n * (n + 1) / 2;
    }
      
    public static void main (String[] args) {
        int n = 4;
        System.out.println(term(n));
    }
}
OUTPUT :
10


1)Find sub array which have maximum sum of the array


public class MaximumSubarraySum {
    public static void main(String[] args) {
        int[] array = { -2, -3, 4, -1, -2, 1, 5, -3 };
        int[] maxSubarray = findMaxSubarray(array);
        
        System.out.print("Maximum subarray: ");
        for (int num : maxSubarray) {
            System.out.print(num + " ");
        }
        
        int maxSum = calculateSum(maxSubarray);
        System.out.println("\nMaximum sum: " + maxSum);
    }
    
    public static int[] findMaxSubarray(int[] array) {
        int maxStart = 0;
        int maxEnd = 0;
        int currentStart = 0;
        int currentSum = array[0];
        int maxSum = array[0];
        
        for (int i = 1; i < array.length; i++) {
            if (currentSum < 0) {
                currentStart = i;
                currentSum = array[i];
            } else {
                currentSum += array[i];
            }
            
            if (currentSum > maxSum) {
                maxSum = currentSum;
                maxStart = currentStart;
                maxEnd = i;
            }
        }
        
        int[] maxSubarray = new int[maxEnd - maxStart + 1];
        for (int i = maxStart, j = 0; i <= maxEnd; i++, j++) {
            maxSubarray[j] = array[i];
        }
        
        return maxSubarray;
    }
    
    public static int calculateSum(int[] array) {
        int sum = 0;
        for (int num : array) {
            sum += num;
        }
        return sum;
    }
}

OUTPUT:
Maximum subarray: 4 -1 -2 1 5
Maximum sum: 7


2)missing element in between 1 to 100

import java.io.*;
import java.util.*;
class GFG {
public static void findMissing(int arr[], int N)
{
int i;
int temp[] = new int[N + 1];
for (i = 0; i <= N; i++) {
temp[i] = 0;
}
for (i = 0; i < N; i++) {
temp[arr[i] - 1] = 1;
}
int ans = 0;
for (i = 0; i <= N; i++) {
if (temp[i] == 0)
ans = i + 1;
}
System.out.println(ans);
}
public static void main(String[] args)
{
int arr[] = { 1, 3, 7, 5, 6, 2 };
int n = arr.length;
findMissing(arr, n);
}
}

OUTPUT:
4

3)Bubble sort

 In bubble sort algorithm, array is traversed from first element to last element.
 Here, current element is compared with the next element.
 If current element is greater than the next element, it is swapped.

PROGRAM:

public class BubbleSort {
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap arr[j] and arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
    
    public static void main(String[] args) {
        int[] arr = {31,81,21,61,11,51,91,41};
        
        System.out.println("Array before sorting: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
        
        bubbleSort(arr);
        
        System.out.println("\nArray after sorting: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}


OUTPUT:
Array before sorting: 31 81 21 61 11 51 91 41
Array after sorting: 11 21 31 41 51 61 81 91


4) Selection sort
 We can create a java program to sort array elements using selection sort.
 In selection sort algorithm, we search for the lowest element and arrange it to the proper location.
 We swap the current element with the next lowest number.

PROGRAM:

public class SelectionSort {
    public static void selectionSort(int[] arr) {
        int n = arr.length;
        
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            
            // Swap arr[i] with arr[minIndex]
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
        }
    }
    
    public static void main(String[] args) {
        int[] arr = {31,81,21,61,11,51,91,41};
        
        System.out.println("Array before sorting: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
        
        selectionSort(arr);
        
        System.out.println("\nArray after sorting: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

OUTPUT:
Array before sorting: 31 81 21 61 11 51 91 41
Array after sorting: 11 21 31 41 51 61 81 91


5)Insertion sort

Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. 
The array is virtually split into a sorted and an unsorted part.
Values from the unsorted part are picked and placed at the correct position in the sorted part.

PROGRAM:
public class InsertionSort {
    public static void insertionSort(int[] arr) {
        int n = arr.length;
        
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;
            
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            
            arr[j + 1] = key;
        }
    }
    
    public static void main(String[] args) {
        int[] arr = {31,81,21,61,11,51,91,41};
        
        System.out.println("Array before sorting: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
        
        insertionSort(arr);
        
        System.out.println("\nArray after sorting: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

OUTPUT:
Array before sorting: 31 81 21 61 11 51 91 41
Array after sorting: 11 21 31 41 51 61 81 91
